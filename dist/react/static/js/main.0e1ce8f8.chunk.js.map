{"version":3,"sources":["components/services/admin-service.js","components/competitions/edit-competition/edit-competiton.js","components/competitions/table-competitions/table-competitions.js","components/constants/constants.js","components/competitions/new-competition/new-competition.js","components/competitions/db-controlls/db-controlls.js","components/competitions/admin-competitions/admin-competitions.js","components/runners/table-runners/table-runners.js","components/runners/add-merged-runner/add-merged-runner.js","components/runners/checked-runners/checked-runners.js","components/runners/merged-runners-list/merged-runners-list.js","components/runners/admin-runners/admin-runners.js","components/app/App.js","serviceWorker.js","index.js"],"names":["AdminService","url","data","fetch","concat","res","console","log","ok","window","parent","postMessage","error","Error","status","json","this","getResponse","method","response","sort","first","second","DATE","map","id","ID","name","NAME","date","moment","format","runners","RUNNERS","STATUS","isAllowed","IS_ALLOWED","isAllowedUpdated","link","URL","headers","Content-Type","body","JSON","stringify","man","woman","FULLNAME","curPlace","CUR_PLACE","curRank","CUR_RANK","place","PLACE","placeDiff","PLACE_DIFF","points","POINTS","pointsDiff","POINTS_DIFF","sex","SEX","subjective","SUBJECTIVE","team","TEAM","checked","isVisible","el","duplicates","runner","main","EditCompetition","state","competitionName","competitionId","disable","onValueChange","value","_this","setState","props","currCompetition","_this$state","getAllCompetitions","saveCompetition","title","finally","_this2","_this$state2","react_default","a","createElement","Card_default","className","CardContent_default","Typography_default","gutterBottom","variant","component","Grid_default","container","spacing","item","xs","TextField_default","label","onChange","event","target","CardActions_default","Button_default","disabled","color","onClick","onValueSave","Component","TableCompetitions","radioButtonState","radioButtonChange","_this$props","competitions","statusChange","Paper_default","Table_default","TableHead_default","TableRow_default","TableCell_default","padding","align","TableBody_default","key","Checkbox_default","toString","e","RadioGroup_default","aria-label","FormControlLabel_default","control","Radio_default","Icon_default","Tooltip_default","placement","href","NewCompetition","competitionLink","urlRegExp","urlError","test","addCompetition","preventDefault","onSubmit","addNewCompetition","type","DbControlls","service","updatedCompetitions","filter","IS_ALLOWED_UPDATED","recalculateCompetitions","totalDropCompetitions","onRecalculate","onTotalDrop","AdminCompetitions","currentCompetition","getCompetitions","current","find","Object","toConsumableArray","new_competition_NewCompetition","db_controlls_DbControlls","edit_competiton_EditCompetition","table_competitions_TableCompetitions","TableRunners","allRunners","AddMergedRunner","checkedRunnersLength","currentRunner","_this$props2","text","currentSex","updateSingleRunner","currRunner","_this$props3","addRunnerToMerge","onTeamChange","NativeSelect_default","sexChange","CheckedRunners","checkedRunners","add_merged_runner_AddMergedRunner","length","MergedRunnersList","mergedRunners","deleteMergedRunner","saveMergedRunners","cancelMergedRunners","AdminRunners","getRunners","push","index","findIndex","splice","forEach","elem","_this$state3","table_runners_TableRunners","checked_runners_CheckedRunners","merged_runners_list_MergedRunnersList","App","showRunners","getDataFromAngular","path","addEventListener","componentDidMount","removeEventListener","admin_runners_AdminRunners","admin_competitions_AdminCompetitions","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e1ce8f8.chunk.js","sourcesContent":["import * as moment from 'moment';\n\nexport default class AdminService {\n\n\n  async getResponse(url, data) {\n    const baseURL = 'http://localhost:8080/admin';\n    const res = await fetch(`${baseURL}${url}`, data);\n    console.log(res);\n    if (!res.ok) {\n      window.parent.postMessage({error: true}, '*');\n      throw new Error(`Could not fetch ${url}, received ${res.status}`);\n    }\n    return res.json();\n  }\n\n  // admin competitions functions\n\n  async getCompetitions() {\n    const response = await this.getResponse(`/competitions`, {method: 'GET'});\n    return response\n      .sort((first, second) => (first.DATE < second.DATE) ? 1 : -1)\n      .map(res => {\n        return {\n          id: res.ID,\n          name: res.NAME,\n          date: moment(res.DATE).format(\"YYYY-MM-DD\"),\n          runners: res.RUNNERS,\n          status: res.STATUS,\n          isAllowed: res.IS_ALLOWED,\n          isAllowedUpdated: res.IS_ALLOWED,\n          link: res.URL\n        }\n      });\n  }\n\n  async saveCompetition(data) {\n    await this.getResponse(`/competitions/updateCompetitionDetails`, {\n      method: 'PUT',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({data})\n    });\n  }\n\n  async addCompetition(data) {\n    await this.getResponse(`/competitions/addCompetition`, {\n      method: 'PUT',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({data})\n    });\n  }\n\n  async recalculateCompetitions(data) {\n    await this.getResponse(`/competitions/recalculate`, {\n      method: 'PUT',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({data})\n    });\n  }\n\n  async totalDropCompetitions() {\n    await this.getResponse(`/competitions/drop`, {\n      method: 'PUT',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({})\n    });\n  }\n\n  // admin runners functions\n  async getRunners() {\n    const response = await this.getResponse(`/runners`, {method: 'GET'});\n    return response.man\n      .concat(response.woman)\n      .sort((first, second) => (first.FULLNAME > second.FULLNAME) ? 1 : ((second.FULLNAME > first.FULLNAME) ? -1 : 0))\n      .map(res => {\n      return {\n        curPlace: res.CUR_PLACE,\n        curRank: res.CUR_RANK,\n        name: res.FULLNAME,\n        id: res.ID,\n        place: res.PLACE,\n        placeDiff: res.PLACE_DIFF,\n        points: res.POINTS,\n        pointsDiff: res.POINTS_DIFF,\n        sex: res.SEX,\n        subjective: res.SUBJECTIVE,\n        team: res.TEAM,\n        checked: false,\n        isVisible: true\n      }\n    });\n  }\n\n  async saveMergedRunners(data) {\n    data.map(el => {\n      el.duplicates = el.duplicates.map(runner => {\n        return {\n        CUR_PLACE: runner.curPlace,\n        CUR_RANK: runner.curRank,\n        FULLNAME: runner.name,\n        ID: runner.id,\n        PLACE: runner.place,\n        PLACE_DIFF: runner.placeDiff,\n        POINTS: runner.points,\n        POINTS_DIFF: runner.pointsDiff,\n        SEX: runner.sex,\n        SUBJECTIVE: runner.subjective,\n        TEAM: runner.team\n      }});\n      el.main = {\n        CUR_PLACE: el.main.curPlace,\n        CUR_RANK: el.main.curRank,\n        FULLNAME: el.main.name,\n        ID: el.main.id,\n        PLACE: el.main.place,\n        PLACE_DIFF: el.main.placeDiff,\n        POINTS: el.main.points,\n        POINTS_DIFF: el.main.pointsDiff,\n        SEX: el.main.sex,\n        SUBJECTIVE: el.main.subjective,\n        TEAM: el.main.team\n      };\n      return {\n        duplicates: el.duplicates,\n        main: el.main\n      };\n    });\n    await this.getResponse(`/runners/merge`, {\n      method: 'PUT',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(data)\n    });\n  }\n\n  async updateSingleRunner(data) {\n    await this.getResponse(`/runners/update`, {\n      method: 'PUT',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({data: {\n          CUR_PLACE: data.curPlace,\n          CUR_RANK: data.curRank,\n          FULLNAME: data.name,\n          ID: data.id,\n          PLACE: data.place,\n          PLACE_DIFF: data.placeDiff,\n          POINTS: data.points,\n          POINTS_DIFF: data.pointsDiff,\n          SEX: data.sex,\n          SUBJECTIVE: data.subjective,\n          TEAM: data.team\n        }})\n    });\n  }\n}\n","import React, {Component} from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport AdminService from '../../services/admin-service';\nimport './edit-competition.css'\n\nexport default class EditCompetition extends Component {\n  state = {\n    competitionName: '',\n    competitionId: '',\n    disable: false\n  };\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      competitionName: props.currCompetition.name,\n      competitionId: props.currCompetition.id,\n      disable: props.currCompetition.name === ''\n    });\n\n  };\n\n\n  onValueChange = (value) => {\n    console.log(value);\n    this.setState({\n      competitionName: value\n    })\n  };\n\n  onValueSave() {\n    const { competitionId, competitionName, getAllCompetitions } =  this.state;\n    const competitions = new AdminService();\n    competitions.saveCompetition({\n        id: competitionId,\n        title: competitionName\n      }\n    ).finally(() => getAllCompetitions(competitionId));\n  };\n\n  render() {\n    const { competitionName, disable } =  this.state;\n    const { currCompetition } =  this.props;\n    return (\n      <Card className='base-margin'>\n        <CardContent>\n          <Typography gutterBottom variant=\"h4\" component=\"h4\" className='margin-bottom'>\n            {!competitionName ? 'Название соревнования' : competitionName}\n          </Typography>\n          <Typography component=\"div\">\n            <Grid container spacing={24}>\n              <Grid item xs={2}>\n                <strong className='edit-text'>ID:</strong>\n              </Grid>\n              <Grid item xs={10}>\n                <span className='edit-text'>{ currCompetition.id ? currCompetition.id : '0000' }</span>\n              </Grid>\n            </Grid>\n            <div className='input-wrapp'>\n              <Grid container spacing={24}>\n                <Grid item xs={2}>\n                  <strong className='edit-text'>Название:</strong>\n                </Grid>\n                <Grid item xs={10}>\n                  <TextField\n                    id=\"competition-name\"\n                    label=\"Название соревнования\"\n                    className='input input-name-width'\n                    value={!competitionName ? 'Название соревнования' : competitionName}\n                    onChange={(event) => this.onValueChange(event.target.value)}\n                  />\n                </Grid>\n              </Grid>\n            </div>\n            <div>\n              <Grid container spacing={24}>\n                <Grid item xs={2}>\n                  <strong className='edit-text'>Дата: </strong>\n                </Grid>\n                <Grid item xs={10}>\n                  <span className='edit-text'>{currCompetition.date ? currCompetition.date : '00-00-000'}</span>\n                </Grid>\n              </Grid>\n            </div>\n            <div>\n              <Grid container spacing={24}>\n                <Grid item xs={2}>\n                  <strong className='edit-text'>Статус: </strong>\n                </Grid>\n                <Grid item xs={10}>\n                  <span className='edit-text'>{currCompetition.status ? currCompetition.status : 'STATUS'}</span>\n                </Grid>\n              </Grid>\n            </div>\n          </Typography>\n        </CardContent>\n        <CardActions className='db-controls'>\n          <Button disabled={ disable } variant=\"contained\" color=\"primary\" onClick={() => this.onValueSave()}>Сохранить</Button>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Icon from '@material-ui/core/Icon';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport './table-competitions.css';\nimport * as Const from '../../constants/constants';\n\nexport default class TableCompetitions extends Component {\n  state = {\n    radioButtonState: ''\n  };\n\n  radioButtonChange = event => {\n    const {radioButtonChange} = this.props;\n    radioButtonChange(+event.target.value);\n    this.setState({radioButtonState: event.target.value});\n  };\n\n  render() {\n    const {competitions, statusChange} = this.props;\n    const {radioButtonState} = this.state;\n    return (\n      <Paper className='base-margin'>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"none\" className='padding-td' align=\"center\" />\n              <TableCell padding=\"none\" className='padding-td' align=\"center\" />\n              <TableCell padding=\"none\" className='padding-td' align=\"left\">Статус</TableCell>\n              <TableCell padding=\"dense\" align=\"left\">Название</TableCell>\n              <TableCell padding=\"dense\" align=\"left\">Дата</TableCell>\n              <TableCell padding=\"dense\" align=\"left\">Спортсмены</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {competitions.map(item => {\n              return (\n                <TableRow key={item.id}>\n                  <TableCell padding=\"none\" className='padding-td'>\n                    <Checkbox\n                      className='controls-padding'\n                      checked={item.isAllowedUpdated === Const.YES}\n                      disabled={item.isAllowedUpdated === null}\n                      value={item.id.toString()}\n                      onChange={(e) => statusChange(+e.target.value)}\n                    />\n                  </TableCell>\n                  <TableCell padding=\"none\" className='padding-td'>\n                    <RadioGroup\n                      className='controls-padding'\n                      aria-label=\"competitions\"\n                      value={radioButtonState}\n                      onChange={(e) => this.radioButtonChange(e)}\n                    >\n                      <FormControlLabel value={item.id.toString()} control={<Radio/>} label=\"\"/>\n                    </RadioGroup>\n                  </TableCell>\n                  <TableCell padding=\"none\" className='padding-td'>\n                    { item.status === 'IMPORTED' ? <Icon className='green' >check</Icon> : null }\n                    { item.status === 'INVALID' ? <Icon className='red' >close</Icon> : null }\n                    { item.status === 'VALID' ? <Icon className='blue' >access_time</Icon> : null }\n                  </TableCell>\n                  <TableCell padding=\"dense\">\n                    <Tooltip title={item.name} placement=\"bottom-start\">\n                      <a className='link' href={item.link}>{item.name}</a>\n                    </Tooltip>\n                  </TableCell>\n                  <TableCell padding=\"dense\">\n                    <span className='date'>{item.date}</span>\n                  </TableCell>\n                  <TableCell padding=\"dense\">{item.runners}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\n","export const YES = 'Y';\nexport const NO = 'N';\n","import React, {Component} from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport AdminService from '../../services/admin-service';\nimport './new-competition.css';\n\nexport default class NewCompetition extends Component {\n\n  state = {\n    competitionLink: '',\n    urlRegExp: /http:\\/\\/(.+)\\.(.+)\\/(.+)\\.(htm|html)/,\n    urlError: '',\n    disabled: true\n\n  };\n\n  onChange = (e) => {\n    const {urlRegExp} = this.state;\n    this.setState({\n      competitionLink: e.target.value\n    });\n\n    const urlCheck = urlRegExp.test(e.target.value);\n    if (urlCheck) {\n      this.setState({\n        urlError: '',\n        disabled: false\n      });\n    } else {\n      this.setState({\n        urlError: 'Invalid URL (Only MEOS, SFR and WinOrient pages)',\n        disabled: true\n      })\n    }\n  };\n\n  addNewCompetition(e) {\n    const {competitionLink} = this.state;\n    const addCompetition = new AdminService();\n    e.preventDefault();\n    addCompetition.addCompetition(competitionLink);\n  };\n\n  render() {\n    const {competitionLink, disabled, urlError} = this.state;\n    return (\n      <form onSubmit={e => this.addNewCompetition(e)}>\n          <div className='input-wrapp form-width'>\n          <TextField\n            id='competition-name'\n            label='New competition'\n            value={competitionLink}\n            onChange={e => this.onChange(e)}\n            className='input link-input'\n          />\n          <Button variant='contained'\n                  type='submit'\n                  disabled={disabled}\n                  className='add-link'>\n            Добавить\n          </Button>\n        </div>\n        <div className='error red'>{urlError}</div>\n      </form>\n\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport AdminService from \"../../services/admin-service\";\nimport './db-controlls.css'\n\nexport default class DbControlls extends Component {\n\n  onRecalculate() {\n    const { competitions } = this.props;\n    const service = new AdminService();\n    const updatedCompetitions = competitions\n      .filter(el => el.isAllowed !== el.isAllowedUpdated)\n      .map(el => {\n        return {\n          ID: el.id,\n          IS_ALLOWED: el.isAllowed,\n          IS_ALLOWED_UPDATED: el.isAllowedUpdated\n        }\n      });\n    service.recalculateCompetitions(updatedCompetitions);\n  };\n\n  onTotalDrop() {\n    const totalDrop = new AdminService();\n    totalDrop.totalDropCompetitions();\n  }\n\n  render() {\n    return (\n      <div className='db-controls'>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => this.onRecalculate()}>\n          Сохранить и пересчитать\n        </Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => this.onTotalDrop()}>\n          Пересчитать полность\n        </Button>\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport EditCompetition from '../edit-competition/edit-competiton';\nimport TableCompetitions from '../table-competitions/table-competitions';\nimport NewCompetition from '../new-competition/new-competition';\nimport DbControlls from '../db-controlls/db-controlls';\nimport AdminService from '../../services/admin-service';\nimport './admin-competitions.css';\nimport * as Const from '../../constants/constants';\n\n\nexport default class AdminCompetitions extends Component {\n\n  state = {\n    competitions: [],\n    currentCompetition: {\n      id: '',\n      name: '',\n      date: '',\n      runners: '',\n      status: '',\n      link: ''\n    }\n  };\n\n  async componentDidMount() {\n    this.getAllCompetitions('');\n  }\n\n  async getAllCompetitions(id) {\n    const competitions = new AdminService();\n    const data = await competitions.getCompetitions();\n    this.setState({competitions: data});\n    if (id) {\n      this.radioButtonChange(id);\n    }\n  }\n\n  radioButtonChange(id) {\n    const current = this.state.competitions.find(el => el.id === id);\n    this.setState({currentCompetition: current});\n  };\n\n  statusChange(id) {\n    const item = this.state.competitions.find(el => el.id === id);\n    item.isAllowedUpdated = item.isAllowedUpdated === Const.NO ? Const.YES : Const.NO;\n    this.setState({\n      competitions: [...this.state.competitions]\n    });\n  };\n\n\n\n  render() {\n    const { competitions, currentCompetition } =  this.state;\n    return (\n      <div className=\"admin-competitions\">\n        <div className='buttons-wrapper'>\n          <NewCompetition/>\n          <DbControlls competitions={ competitions }/>\n        </div>\n        <EditCompetition currCompetition={ currentCompetition }\n                         getAllCompetitions={(id) => this.getAllCompetitions(id)}\n                         className='base-margin'/>\n        <TableCompetitions competitions={ competitions }\n                           radioButtonChange={(id) => this.radioButtonChange(id)}\n                           statusChange={(id) => this.statusChange(id)}\n                           className='base-margin'/>\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport './table-runners.css'\n\nexport default class TableRunners extends Component {\n  state = {\n  };\n\n  render() {\n    const {allRunners, statusChange} = this.props;\n    return (\n      <Paper className='base-margin'>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\" align=\"center\" />\n              <TableCell align=\"left\">Имя</TableCell>\n              <TableCell align=\"left\">Спортивное общество</TableCell>\n              <TableCell align=\"left\">Очки</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {allRunners.map(runner => {\n                return (\n                    <TableRow key={runner.id} className={runner.isVisible ? '': 'invisible-row'}>\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        className='controls-padding'\n                        checked={runner.checked}\n                        value={runner.id.toString()}\n                        onChange={(e) => statusChange(+e.target.value)}\n                      />\n                    </TableCell>\n                    <TableCell>{runner.name}</TableCell>\n                    <TableCell>{runner.team}</TableCell>\n                    <TableCell>{runner.points}</TableCell>\n                  </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Grid from '@material-ui/core/Grid';\nimport './add-merged-runner.css';\n\nexport default class AddMergedRunner extends Component {\n  state = {\n    sex: '',\n    team: ''\n  };\n\n  componentDidMount() {\n    const {checkedRunnersLength, currentRunner} = this.props;\n    if (checkedRunnersLength === 1) {\n      this.setState({\n        sex: currentRunner.sex,\n        team: currentRunner.team\n      })\n    }\n  }\n\n  componentWillReceiveProps() {\n    const {checkedRunnersLength, currentRunner} = this.props;\n    if (checkedRunnersLength === 1) {\n      this.setState({\n        sex: currentRunner.sex,\n        team: currentRunner.team\n      })\n    }\n  };\n\n  onTeamChange(text) {\n    this.setState({\n      team: text\n    });\n  }\n\n  sexChange() {\n    const {sex} = this.state;\n    const currentSex = sex === 'M' ? 'W' : 'M';\n    this.setState({\n      sex: currentSex\n    })\n  }\n\n  updateSingleRunner(currentRunner) {\n    const {sex, team} = this.state;\n    const {updateSingleRunner} = this.props;\n    const currRunner = currentRunner;\n    currRunner.sex = sex;\n    currRunner.team = team;\n    updateSingleRunner(currentRunner);\n  }\n\n  render() {\n    const {team, sex} = this.state;\n    const {currentRunner, checkedRunnersLength, addRunnerToMerge} = this.props;\n    return (\n      <Card className='base-margin'>\n        <CardContent>\n          <Typography gutterBottom variant=\"h4\" component=\"h4\" className='margin-bottom'>\n            {currentRunner.name}\n          </Typography>\n          <Typography component=\"div\" variant=\"h6\">\n            <Grid container spacing={24}>\n              <Grid item xs={2}>\n                <strong>ID: </strong>\n              </Grid>\n              <Grid item xs={10}>\n                <span>{currentRunner.id}</span>\n              </Grid>\n            </Grid>\n            <Grid container spacing={24}>\n              <Grid item xs={2}>\n                <strong>Клуб: </strong>\n              </Grid>\n              <Grid item xs={10}>\n                <span>{checkedRunnersLength > 1 ?\n                  currentRunner.team :\n                  <TextField\n                    id=\"runner-club\"\n                    label=\"Название соревнования\"\n                    className='input input-name-width'\n                    value={team}\n                    onChange={(event) => this.onTeamChange(event.target.value)}\n                  />\n                }</span>\n              </Grid>\n            </Grid>\n            <Grid container spacing={24}>\n              <Grid item xs={2}>\n                <strong>Пол: </strong>\n              </Grid>\n              <Grid item xs={10}>\n                <span>{checkedRunnersLength > 1 ?\n                  currentRunner.sex :\n                  <NativeSelect\n                    value={sex}\n                    name=\"sex\"\n                    onChange={() => this.sexChange()}\n                    className='select-gender'\n                  >\n                    <option value=\"M\">Мужской</option>\n                    <option value=\"W\">Женский</option>\n                  </NativeSelect>}</span>\n              </Grid>\n            </Grid>\n          </Typography>\n        </CardContent>\n        <CardActions className='db-controls'>\n          {checkedRunnersLength > 1 ?\n            <Button variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => addRunnerToMerge(currentRunner.id)}>\n              Обьединить\n            </Button> :\n            <Button variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => this.updateSingleRunner(currentRunner)}>\n              Обновить\n            </Button>}\n        </CardActions>\n      </Card>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport AddMergedRunner from '../add-merged-runner/add-merged-runner';\nimport AdminService from '../../services/admin-service';\n\nexport default class CheckedRunners extends Component {\n  state = {\n    radioButtonState: '',\n    currentRunner: {}\n  };\n\n  componentWillReceiveProps(props) {\n    const {radioButtonState} = this.state;\n    const isRunner = props.checkedRunners.find((runner) => runner.id === +radioButtonState);\n    if (!isRunner) {\n      this.setState({\n        currentRunner: {},\n        radioButtonState: ''\n      });\n    }\n  };\n\n  radioButtonChange = event => {\n    const {checkedRunners} = this.props;\n    this.setState({radioButtonState: event.target.value});\n    const currentRunner = checkedRunners.find(runner => runner.id === +event.target.value);\n    this.setState({\n      currentRunner\n    });\n  };\n\n  updateSingleRunner(currentRunner) {\n    const adminService = new AdminService();\n    adminService.updateSingleRunner(currentRunner);\n  }\n\n\n  render() {\n    const {checkedRunners, addRunnerToMerge} = this.props;\n    const {radioButtonState, currentRunner} = this.state;\n    return (\n      <div>\n        <Paper className='base-margin'>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\" align=\"center\" />\n                <TableCell align=\"left\">Имя</TableCell>\n                <TableCell align=\"left\">Спортивное общество</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {checkedRunners.map(runner => {\n                return (\n                  <TableRow key={runner.id}>\n                    <TableCell padding=\"checkbox\">\n                      <RadioGroup\n                        className='controls-padding'\n                        aria-label=\"competitions\"\n                        value={radioButtonState}\n                        onChange={(e) => this.radioButtonChange(e)}\n                      >\n                        <FormControlLabel value={runner.id.toString()} control={<Radio/>} label=\"\"/>\n                      </RadioGroup>\n                    </TableCell>\n                    <TableCell>{runner.name}</TableCell>\n                    <TableCell>{runner.team}</TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Paper>\n        {radioButtonState ? <AddMergedRunner\n          currentRunner={currentRunner}\n          checkedRunnersLength={checkedRunners.length}\n          addRunnerToMerge={(id) => addRunnerToMerge(id)}\n          updateSingleRunner={() => this.updateSingleRunner(currentRunner)}\n        /> : null}\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport './merged-runners-list.css'\n\nexport default class MergedRunnersList extends Component {\n  state = {};\n\n\n  render() {\n    const {mergedRunners, deleteMergedRunner, saveMergedRunners, cancelMergedRunners} = this.props;\n    return (\n      <Card className='base-margin sticky-top'>\n        <CardContent>\n          <Typography gutterBottom variant=\"h4\" component=\"h4\" className='margin-bottom'>\n            Спортсмены для обработки:\n          </Typography>\n          <Typography component=\"div\" variant=\"h6\">\n            {mergedRunners.map((runner, key) => {\n              return (\n                <div key={runner.main.id} className=\"runners-list\">\n                  <strong>{key + 1}. </strong>\n                  <span>{runner.main.name}</span>\n                  <button className='trash-button' onClick={() => deleteMergedRunner(runner.main.id)}><Icon className='red' >close</Icon></button>\n                  {runner.duplicates.map((runners, key) => {\n                    return (\n                      <div key={key} className='duplicates-runners'>{runners.name}</div>\n                    )\n                  })}\n                </div>\n              );\n            })}\n          </Typography>\n        </CardContent>\n        <CardActions className='db-controls'>\n            <Button variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => saveMergedRunners()}\n            className='red'>\n              Сохранить\n            </Button>\n            <Button variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => cancelMergedRunners()}>\n              Отменить\n            </Button>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n","import React, {Component} from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TableRunners from '../table-runners/table-runners';\nimport CheckedRunners from '../checked-runners/checked-runners';\nimport MergedRunnersList from '../merged-runners-list/merged-runners-list';\nimport AdminService from '../../services/admin-service';\n\nexport default class AdminRunners extends Component {\n\n  state = {\n    allRunners: [],\n    checkedRunners: [],\n    mergedRunners: []\n  };\n\n  async componentDidMount() {\n    const runners = new AdminService();\n    const allRunners = await runners.getRunners();\n    this.setState({allRunners});\n  }\n\n  statusChange(id) {\n    const {checkedRunners, allRunners} = this.state;\n    const runner = allRunners.find(el => el.id === id);\n    runner.checked = !runner.checked;\n    if (runner.checked) {\n      checkedRunners.push(runner);\n    } else {\n      const index = checkedRunners.findIndex((el) => el.id === id);\n      checkedRunners.splice(index, 1);\n    }\n    this.setState({\n      allRunners: [...allRunners],\n      checkedRunners: [...checkedRunners]\n    });\n  };\n\n  addRunnerToMerge(id) {\n    const {checkedRunners, mergedRunners} = this.state\n    const currentRunner = checkedRunners.find((runner) => runner.id === id);\n    mergedRunners.push({\n      duplicates: checkedRunners,\n      main: currentRunner\n    });\n    checkedRunners.forEach(el => {\n      const runner = el;\n      runner.isVisible = false;\n    });\n    this.setState({\n      checkedRunners: []\n    });\n  };\n\n  cancelMergedRunners() {\n    const {mergedRunners} = this.state;\n    mergedRunners.forEach(el => {\n      el.duplicates.forEach(elem => {\n        const runner = elem;\n        runner.checked = false;\n        runner.isVisible = true;\n      });\n    });\n\n    this.setState({\n      mergedRunners: []\n    });\n  }\n\n  saveMergedRunners() {\n    const {mergedRunners} = this.state;\n    const adminService = new AdminService();\n    adminService.saveMergedRunners(mergedRunners);\n    this.cancelMergedRunners();\n  }\n\n  deleteMergedRunner(id) {\n    const {mergedRunners} = this.state;\n    const index = mergedRunners.findIndex((item) => item.main.id === id);\n    mergedRunners[index].duplicates.forEach(el => {\n      const runner = el;\n      runner.isVisible = true;\n      runner.checked = false;\n    });\n    mergedRunners.splice(index, 1);\n    this.setState({\n      mergedRunners\n    })\n  }\n\n  render() {\n    const {allRunners, checkedRunners, mergedRunners} = this.state;\n    return (\n      <div className=\"Admin-runners\">\n        <Grid container spacing={24}>\n          <Grid item xs={6}>\n            <TableRunners allRunners={allRunners} statusChange={(id) => this.statusChange(id)}/>\n          </Grid>\n          <Grid item xs={6}>\n            {checkedRunners.length > 0 ?\n              <CheckedRunners checkedRunners={checkedRunners}\n                              addRunnerToMerge={(id) => this.addRunnerToMerge(id)}\n              /> : null}\n\n            {mergedRunners.length > 0 ?\n              <MergedRunnersList mergedRunners={mergedRunners}\n                                 cancelMergedRunners={() => this.cancelMergedRunners()}\n                                 saveMergedRunners={()=> this.saveMergedRunners()}\n                                 deleteMergedRunner={(id)=> this.deleteMergedRunner(id)}\n              /> : null}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport AdminCompetitions from '../competitions/admin-competitions/admin-competitions';\nimport AdminRunners from '../runners/admin-runners/admin-runners';\n\nexport default class App extends Component {\n\n  state = {\n    showRunners: true\n  };\n\n  componentDidMount() {\n    window.addEventListener('message', this.getDataFromAngular);\n    window.parent.postMessage({componentDidMount: true}, '*');\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.getDataFromAngular);\n  }\n\n  getDataFromAngular = (e) => {\n    if(e.data.path === 'runners'){\n      this.setState({\n        showRunners: true\n      })\n    }\n    if(e.data.path === 'competition'){\n      this.setState({\n        showRunners: false\n      })\n    }\n  };\n\n  render() {\n    const { showRunners } =  this.state;\n    return (\n      <div className=\"Admin wrapper db-controls\">\n        { showRunners ? <AdminRunners/> : <AdminCompetitions/> }\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}